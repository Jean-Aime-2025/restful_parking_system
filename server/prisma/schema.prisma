generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED
}

enum PasswordResetStatus {
  PENDING
  IDLE
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  DEASSIGNED
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?             @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  assignedSlotId       String?             @unique
  assignedSlot         Slot?               @relation("UserAssignedSlot", fields: [assignedSlotId], references: [id])

  parkingRequests      ParkingRequest[]
  vehicles             Vehicle[]

  @@map("users")
}

model Slot {
  id          String  @id @default(uuid())
  code        String  @unique
  occupied    Boolean @default(false)
  description String?

  user        User?   @relation("UserAssignedSlot")

  @@map("slots")
}

model Vehicle {
  id         String  @id @default(uuid())
  platenumber    String  @unique
  model      String
  color      String?
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime @default(now())

  parkingRequests ParkingRequest[]

  @@map("vehicles")
}

model ParkingRequest {
  id         String        @id @default(uuid())
  user       User          @relation(fields: [userId], references: [id])
  userId     String
  vehicle    Vehicle       @relation(fields: [vehicleId], references: [id])
  vehicleId  String
  startTime  DateTime
  endTime    DateTime
  notes      String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  @@map("parking_requests")
}
